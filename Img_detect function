  def Img_detect(self, cam, sign):
      
    # Threshold
    MIN_MATCH_COUNT=10

    # Initiate SIFT detector
    sift=cv2.xfeatures2d.SIFT_create()


    # Create the Flann Matcher object
    FLANN_INDEX_KDITREE=0
    flannParam=dict(algorithm=FLANN_INDEX_KDITREE,tree=5)
    flann=cv2.FlannBasedMatcher(flannParam,{})


    train_img = cv2.imread(sign,0)  # train image
    kp1,desc1= sift.detectAndCompute(train_img,None) # find the keypoints and descriptors with SIFT
    

    frame = cam
    gray = cv2.cvtColor(frame,cv2.COLOR_BGR2GREY)
    kp2, desc2 = sift.detectAndCompute(gray,None)   # find the keypoints and descriptors with SIFT  of the frame captured
    
    matches=flann.knnMatch(desc2,desc1,k=2)


    # store all the good matches as per Lowe's ratio test.
    goodMatch=[]
    for m,n in matches:
      if(m.distance<0.75*n.distance):
        goodMatch.append(m)

    if(len(goodMatch)>MIN_MATCH_COUNT):

      return True

    else:

      return False
    cv2.imshow('result',frame)
